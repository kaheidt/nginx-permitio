# Set up Lua paths
lua_package_path "/etc/nginx/conf.d/?.lua;;";

# Initialize Lua modules
init_by_lua_block {
    -- Initialize any global Lua modules here if needed
}

# Configure access logs to go to stdout
log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';

access_log /dev/stdout main;
gzip on;

server {
    listen 80;
    server_name localhost;

    # Define variables from environment variables
    set $vehicle_telemetry_service_url "http://vehicle-telemetry:3001";
    set $maintenance_service_url "http://maintenance-service:3002";
    set $fleet_management_service_url "http://fleet-management:3003";
    set $driver_analytics_service_url "http://driver-analytics:3004";
    set $auth_service_url "http://auth-service:3000";
    set $pdp_sidecar_url "http://pdp-sidecar:7000";
    set $echo_service_url "http://echo:8080";
        
    # Make environment variables available to Lua
    set_by_lua_block $permit_api_key {
        return os.getenv("PERMIT_API_KEY") or ""
    }
    set_by_lua_block $permit_environment {
        return os.getenv("PERMIT_ENVIRONMENT") or "dev"
    }
    set_by_lua_block $permit_local_pdp_url {
        return os.getenv("PERMIT_LOCAL_PDP_URL") or "http://pdp-sidecar:7000"
    }
    
    # Add DNS resolver for Docker's internal DNS
    resolver 127.0.0.11 ipv6=off;

    # Logging configuration - redirected to stdout/stderr
    access_log /dev/stdout;
    error_log /dev/stderr debug;

    # Common proxy settings - applied to all locations
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # PDP Sidecar health check (for debugging)
    location /pdp-health {
        proxy_pass $pdp_sidecar_url/health;
    }

    # PDP direct API access (for debugging)
    location /pdp-api/ {
        proxy_pass $pdp_sidecar_url/;
    }

    location /test-lua2 {
        content_by_lua_block {
            local permit_api_key = os.getenv("PERMIT_API_KEY")
            ngx.say("PERMIT_API_KEY: ", permit_api_key)
        }
    }
    
    # Echo service direct access (for debugging)
    location /echo/ {
        proxy_pass $echo_service_url/;
    }

    # API endpoints with authorization
    location /api/v1/vehicles {
        access_by_lua_block {
            local permit = require("permit")
            permit.check_authorization()
        }
        
        # Preserve original client Authorization header
        proxy_set_header Authorization $http_authorization;
        proxy_pass $vehicle_telemetry_service_url;
    }

    location /api/v1/maintenance {
        access_by_lua_block {
            local permit = require("permit")
            permit.check_authorization()
        }
        
        # Preserve original client Authorization header
        proxy_set_header Authorization $http_authorization;
        proxy_pass $maintenance_service_url;
    }

    location /api/v1/fleet {
        access_by_lua_block {
            local permit = require("permit")
            permit.check_authorization()
        }
        
        # Preserve original client Authorization header
        proxy_set_header Authorization $http_authorization;
        proxy_pass $fleet_management_service_url;
    }

    location /api/v1/analytics {
        access_by_lua_block {
            local permit = require("permit")
            permit.check_authorization()
        }
        
        # Preserve original client Authorization header
        proxy_set_header Authorization $http_authorization;
        proxy_pass $driver_analytics_service_url;
    }

    # Authentication service (no authorization required)
    location /auth/ {
        proxy_pass $auth_service_url$request_uri;
    }

    # Static content for demo frontend
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }
}